/*
 * Copyright (c) 1999
 * Silicon Graphics Computer Systems, Inc.
 *
 * Copyright (c) 1999 
 * Boris Fomitchev
 *
 * This material is provided "as is", with absolutely no warranty expressed
 * or implied. Any use is at your own risk.
 *
 * Permission to use or copy this software for any purpose is hereby granted 
 * without fee, provided the above notices are retained on all copies.
 * Permission to modify the code and to distribute modified code is granted,
 * provided the above notices are retained, and a notice that the code was
 * modified is included with the above copyright notice.
 *
 */ 
#ifndef __SGI_STL_LOCALE
#define __SGI_STL_LOCALE

// Basic framework: class locale and class locale::facet

# ifndef __STL_OUTERMOST_HEADER_ID
#  define __STL_OUTERMOST_HEADER_ID 0x1041
#  include <stl/_prolog.h>
# endif

# if defined (__SGI_STL_OWN_IOSTREAMS)

#include <stl/_locale.h>

#include <ios>                  // Some facets need basic_ios and/or ios_base
#include <streambuf>                         // Needed by <iterator>
#include <stl/_stream_iterator.h>             // Needed for [io]streambuf_iterator
#include <limits>               // Needed by numeric facets
#include <ctime>                // Needed (for struct tm) by time facets

// Individual facets
#include <stl/_ctype.h>
#include <stl/_codecvt.h>
#include <stl/_collate.h>
#include <stl/_numeric_facets.h>
#include <stl/_monetary.h>
#include <stl/_time_facets.h>
#include <stl/_messages_facets.h>

// Convenience interfaces
#undef isspace
#undef isprint
#undef iscntrl
#undef isupper
#undef islower
#undef isalpha
#undef isdigit
#undef ispunct
#undef isxdigit
#undef isalnum
#undef isgraph
#undef toupper
#undef tolower

__STL_BEGIN_NAMESPACE

template <class _CharT> 
inline bool isspace (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::space, c);
}

template <class _CharT> 
inline bool isprint (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::print, c);
}

template <class _CharT> 
inline bool iscntrl (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::cntrl, c);
}

template <class _CharT> 
inline bool isupper (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::upper, c);
}

template <class _CharT> 
inline bool islower (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::lower, c);
}

template <class _CharT> 
inline bool isalpha (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::alpha, c);
}

template <class _CharT> 
inline bool isdigit (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::digit, c);
}

template <class _CharT> 
inline bool ispunct (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::punct, c);
}

template <class _CharT> 
inline bool isxdigit (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::xdigit, c);
}

template <class _CharT> 
inline bool isalnum (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::alnum, c);
}

template <class _CharT> 
inline bool isgraph (_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).is(ctype_base::graph, c);
}

template <class _CharT>
inline _CharT toupper(_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).toupper(c);
}

template <class _CharT>
inline _CharT tolower(_CharT c, const locale& loc) {
  return (use_facet<ctype<_CharT> >(loc)).tolower(c);
}

# ifndef __IOS_BASE_INITIALIZED
#  define __IOS_BASE_INITIALIZED
// Global initializer object, to ensure construction of static objects.
static ios_base::Init __initializer;
# endif

__STL_END_NAMESPACE

# elif !defined (__STL_USE_NO_IOSTREAMS)
#  include <wrap_std/locale> 
# endif

# if (__STL_OUTERMOST_HEADER_ID == 0x1041)
#  include <stl/_epilog.h>
#  undef __STL_OUTERMOST_HEADER_ID
# endif

#endif /* __SGI_STL_LOCALE */


// Local Variables:
// mode:C++
// End:
