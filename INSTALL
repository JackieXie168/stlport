**********************************************************************
* 	INSTALL file for STLport 5.0                                 *
*                                                                    *
**********************************************************************

STLport-5.0 is a full ANSI C++ Standard library.

This distribution contains STLport sources only, no binaries.
To use STLport iostreams, you have to build STLport library from sources in "build/lib" 
directory and link your programs with it.

This is major change since pre-4.0 releases, please read the instructions carefully.

==== Unpacking and installing STLport ==========

1) Unpack STLport archive to a directory accessible during compilation.
   NOTE: DO NOT overwrite header files coming with the compiler, even if you made
   a backup - this won't work! Most probably, you've already unpacked the archive before
   reading this file though ;)

2) Make sure "stlport" directory of this distribution comes before compiler's one 
   in your search path when you compile the project;

   Note: for SunPro CC 5.0 and higher, there used to be special directory "stlport/SC5"
	 this is now obsolete, please make sure you do not use it anymore.

3) Make sure you do not rename this "stlport" subdirectory -
   that may result in compilation errors.

   NOTE:  Do NOT attempt to run "configure" if you don't use cross-compilation!
          It is deprecated, moved to safe standalone folder
          and should be used as a helper to create initial config for a new compiler only. 
          Your compiler should be recognized by STLport source code with no configuring.
	  Please edit appropriate configuration header for your compiler
          directly if you have to make compiler-specific configuration changes.


4)  Go to "build/lib" subdirectory. It contains various makefiles for different
    compilers and 'make' utilities (GNU Make and Microsoft's nmake supported).
    If you are not able to find makefile for your particular 
    compiler, please use one that looks most similar to your make engine to 
    create your own.

    Verify you can do command line compiles. IDE users may have to do something 
    special, like add environment variables (for Microsoft) or install 
    additional compiler components (for Metrowerks), before they can use their 
    command line compilers.

   IMPORTANT:

   If you DO NOT plan to use STLport iostreams and/or locale implementation, you
   do not have to build the library.
 
   If you have decided to disable STLport iostreams and locale, you may stop reading here.


==== Building STLport iostreams library ==========

Below are step-by-step instructions to build STLport streams library. This is a general
build process description, for a more detailed one check the doc folder:

5)  Using appropriate makefile, do

      make -f <compiler name>.mak clean; make -f <compiler name>.mak depend
      make -f <compiler name>.mak install

    to build the STLport libraries. Makefiles are set up to build several different
    flavors - debug/nondebug, static/dynamic versions. But not all flavors will be build
    by default. See build/lib/README and build/lib/README.options for other make tagets.

    Note: your "make" program may have different name, like "nmake" for Visual C++.

    Examples : 
     1. If you are building STLport for just one compiler, you may do something like that
        (DOS syntax for Visual C++ below):
        nmake -f vc6.mak clean
        nmake -f vc6.mak install

     2. If you plan to build STLport with multiple compilers, use "make -f" :
	make -f gcc.mak clean install
	make -f sunpro.mak clean install


    Note: 'install' taget work slightly different from ordinal---it install libraries into
    <STLport root dir>/lib catalog, NOT IN SYSTEM CATALOG. You can do 'installation' with
    following commands (on UNIX-like platforms):

      su
      tar cf - stlport | (cd /usr/local/include; tar xf -)
      chmod -R a+r /usr/local/include/stlport
      chown -R root:root /usr/local/include/stlport
      (cd lib; tar cf - --exclude=CVS --exclude=.cvsignore .) | (cd /usr/local/lib; tar xf -)
      chown -R root:root /usr/local/lib/libstlport*
      exit

    or do following (on Windows platforms):

      ....


    If you use cross-compiler, you can find libraries in the <STLport root dir>/lib/<taget platform>
    catalog.

6)  If build fails, you may choose to :
     - try fixing the build ;
     - wait until somebody else will submit corresponding changes to be incorporated in next STLport 
       release/snapshot. To use STLport w/o its own iostreams, please do step 3a).

    In case you do patch STLport, please submit your patches to support@stlport.com or (better)
    to STLport Forum (http://www.stlport.com/cgi-bin/forum/dcboard.cgi)

==== Linking your application with STLport library ==========

7) Check the build:

    cd build/test/unit
    make -f <compiler name>.mak
    ./obj/<compiler name>/shared/stl_unit_test
    ./obj/<compiler name>/shared-stlg/stl_unit_test

8) Supply the "lib" subdirectory to the library search path and add desired 
   library to the list of libraries to link with.
   Examples (imagine you have mytest.cpp in the same directory as this file is):
	With gcc     : gcc -I./stlport mytest.cpp -L./lib/ -lstlport_gcc
	With DEC CC  : cxx -I./stlport mytest.cpp -L./lib/ -lstlport_deccxx
	With SUN CC  : CC -I./stlport mytest.cpp -L./lib/ -lstlport_sunpro
	.....
   [ Visual C++ specific ] For VC++, you do not have to specify "stlport-msvc-XXX.lib" explicitly,
   as it is being choosen and forced to link automatically by "#pragma"'s in stlport/config/stl_select_lib.h.
   Appropriate version is being selected based on /MD[d] vs /MT[d] options and __STL_DEBUG setting.
   All you have to do is to set library search path for the linker.
	Example :
           cl.exe /I.\stlport mytest.cpp /link /libpath:.\lib /MD

9) If you linked your application with shared STLport library (.so or .dll), please make your .so or
   .dll's to be found in PATH at runtime. On Windows, the simplest way to do it
   is to copy all .dll's to Windows system directory. Or, you might choose to add directory
   containing STLport to the PATH environment string. 

10) Have fun !
